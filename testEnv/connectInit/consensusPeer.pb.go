// Code generated by protoc-gen-go.
// source: consensusPeer.proto
// DO NOT EDIT!

/*
Package connectInit is a generated protocol buffer package.

It is generated from these files:
	consensusPeer.proto

It has these top-level messages:
	StatMessage
*/
package connectInit

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"
import connectInit1 "hyperchain/protos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatMessage struct {
	Type     string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	JSONInfo []byte `protobuf:"bytes,2,opt,name=JSONInfo,json=jSONInfo,proto3" json:"JSONInfo,omitempty"`
}

func (m *StatMessage) Reset()                    { *m = StatMessage{} }
func (m *StatMessage) String() string            { return proto.CompactTextString(m) }
func (*StatMessage) ProtoMessage()               {}
func (*StatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*StatMessage)(nil), "connectInit.statMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for TestEnv service

type TestEnvClient interface {
	Chat(ctx context.Context, in *connectInit1.Message, opts ...grpc.CallOption) (*connectInit1.Message, error)
	Statistic(ctx context.Context, in *StatMessage, opts ...grpc.CallOption) (*StatMessage, error)
}

type testEnvClient struct {
	cc *grpc.ClientConn
}

func NewTestEnvClient(cc *grpc.ClientConn) TestEnvClient {
	return &testEnvClient{cc}
}

func (c *testEnvClient) Chat(ctx context.Context, in *connectInit1.Message, opts ...grpc.CallOption) (*connectInit1.Message, error) {
	out := new(connectInit1.Message)
	err := grpc.Invoke(ctx, "/connectInit.testEnv/chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testEnvClient) Statistic(ctx context.Context, in *StatMessage, opts ...grpc.CallOption) (*StatMessage, error) {
	out := new(StatMessage)
	err := grpc.Invoke(ctx, "/connectInit.testEnv/statistic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestEnv service

type TestEnvServer interface {
	Chat(context.Context, *connectInit1.Message) (*connectInit1.Message, error)
	Statistic(context.Context, *StatMessage) (*StatMessage, error)
}

func RegisterTestEnvServer(s *grpc.Server, srv TestEnvServer) {
	s.RegisterService(&_TestEnv_serviceDesc, srv)
}

func _TestEnv_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(connectInit1.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEnvServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectInit.testEnv/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEnvServer).Chat(ctx, req.(*connectInit1.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestEnv_Statistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEnvServer).Statistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectInit.testEnv/Statistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEnvServer).Statistic(ctx, req.(*StatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestEnv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectInit.testEnv",
	HandlerType: (*TestEnvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "chat",
			Handler:    _TestEnv_Chat_Handler,
		},
		{
			MethodName: "statistic",
			Handler:    _TestEnv_Statistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("consensusPeer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xce, 0xcf, 0x2b,
	0x4e, 0xcd, 0x2b, 0x2e, 0x2d, 0x0e, 0x48, 0x4d, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4e, 0xce, 0xcf, 0xcb, 0x4b, 0x4d, 0x2e, 0xf1, 0xcc, 0xcb, 0x2c, 0x91, 0xe2, 0x87, 0xab,
	0x80, 0xc8, 0x2a, 0xd9, 0x72, 0x71, 0x17, 0x97, 0x24, 0x96, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6,
	0xa7, 0x0a, 0x09, 0x71, 0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x81, 0xd9, 0x42, 0x52, 0x5c, 0x1c, 0x5e, 0xc1, 0xfe, 0x7e, 0x9e, 0x79, 0x69, 0xf9, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x1c, 0x59, 0x50, 0xbe, 0x51, 0x13, 0x23, 0x17, 0x7b, 0x49, 0x6a,
	0x71, 0x89, 0x6b, 0x5e, 0x99, 0x90, 0x09, 0x17, 0x4b, 0x72, 0x46, 0x62, 0x89, 0x90, 0x88, 0x1e,
	0x92, 0x8d, 0x7a, 0x50, 0x93, 0xa5, 0xb0, 0x8a, 0x2a, 0x31, 0x08, 0x39, 0x72, 0x71, 0x82, 0x1c,
	0x90, 0x59, 0x5c, 0x92, 0x99, 0x2c, 0x24, 0x81, 0xa2, 0x08, 0xc9, 0x61, 0x52, 0x38, 0x65, 0x94,
	0x18, 0x92, 0xd8, 0xc0, 0x5e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x32, 0xf4, 0xb6, 0xed,
	0xff, 0x00, 0x00, 0x00,
}
